// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "go-ecommerce-app/internal/domain"

	fiber "github.com/gofiber/fiber/v2"

	mock "github.com/stretchr/testify/mock"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// Authorize provides a mock function with given fields: ctx
func (_m *Auth) Authorize(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateHashedPassword provides a mock function with given fields: password
func (_m *Auth) CreateHashedPassword(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for CreateHashedPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateCode provides a mock function with no fields
func (_m *Auth) GenerateCode() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateCode")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GenerateToken provides a mock function with given fields: id, email, role
func (_m *Auth) GenerateToken(id uint, email string, role string) (string, error) {
	ret := _m.Called(id, email, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string) (string, error)); ok {
		return rf(id, email, role)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string) string); ok {
		r0 = rf(id, email, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, string, string) error); ok {
		r1 = rf(id, email, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentUser provides a mock function with given fields: ctx
func (_m *Auth) GetCurrentUser(ctx *fiber.Ctx) *domain.JwtCustomClaims {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUser")
	}

	var r0 *domain.JwtCustomClaims
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) *domain.JwtCustomClaims); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.JwtCustomClaims)
		}
	}

	return r0
}

// VerifyPassword provides a mock function with given fields: password, hashedPassword
func (_m *Auth) VerifyPassword(password string, hashedPassword string) (bool, error) {
	ret := _m.Called(password, hashedPassword)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPassword")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(password, hashedPassword)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(password, hashedPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(password, hashedPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: bearerToken
func (_m *Auth) VerifyToken(bearerToken string) (*domain.JwtCustomClaims, error) {
	ret := _m.Called(bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *domain.JwtCustomClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.JwtCustomClaims, error)); ok {
		return rf(bearerToken)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.JwtCustomClaims); ok {
		r0 = rf(bearerToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.JwtCustomClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bearerToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
