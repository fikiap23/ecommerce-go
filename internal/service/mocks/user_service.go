// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "go-ecommerce-app/internal/domain"
	dto "go-ecommerce-app/internal/dto"

	locales "go-ecommerce-app/pkg/locales"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// BecomeSeller provides a mock function with given fields: id, input
func (_m *UserService) BecomeSeller(id uint, input interface{}) (string, error) {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for BecomeSeller")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, interface{}) (string, error)); ok {
		return rf(id, input)
	}
	if rf, ok := ret.Get(0).(func(uint, interface{}) string); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, interface{}) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCart provides a mock function with given fields: input, u
func (_m *UserService) CreateCart(input interface{}, u domain.User) ([]interface{}, error) {
	ret := _m.Called(input, u)

	if len(ret) == 0 {
		panic("no return value specified for CreateCart")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, domain.User) ([]interface{}, error)); ok {
		return rf(input, u)
	}
	if rf, ok := ret.Get(0).(func(interface{}, domain.User) []interface{}); ok {
		r0 = rf(input, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, domain.User) error); ok {
		r1 = rf(input, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: u
func (_m *UserService) CreateOrder(u domain.User) (int, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (int, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(domain.User) int); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfile provides a mock function with given fields: id, input
func (_m *UserService) CreateProfile(id uint, input interface{}) error {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, interface{}) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCart provides a mock function with given fields: id
func (_m *UserService) GetCart(id uint) ([]interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCart")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManyOrder provides a mock function with given fields: u
func (_m *UserService) GetManyOrder(u domain.User) ([]interface{}, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for GetManyOrder")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) ([]interface{}, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(domain.User) []interface{}); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: id, uId
func (_m *UserService) GetOrderById(id uint, uId uint) ([]interface{}, error) {
	ret := _m.Called(id, uId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderById")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]interface{}, error)); ok {
		return rf(id, uId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []interface{}); ok {
		r0 = rf(id, uId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, uId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: id, lang
func (_m *UserService) GetProfile(id uint, lang locales.Language) (*domain.User, error) {
	ret := _m.Called(id, lang)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, locales.Language) (*domain.User, error)); ok {
		return rf(id, lang)
	}
	if rf, ok := ret.Get(0).(func(uint, locales.Language) *domain.User); ok {
		r0 = rf(id, lang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, locales.Language) error); ok {
		r1 = rf(id, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVerificationCode provides a mock function with given fields: idUser, lang
func (_m *UserService) GetVerificationCode(idUser uint, lang locales.Language) error {
	ret := _m.Called(idUser, lang)

	if len(ret) == 0 {
		panic("no return value specified for GetVerificationCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, locales.Language) error); ok {
		r0 = rf(idUser, lang)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: input, lang
func (_m *UserService) Login(input dto.UserLogin, lang locales.Language) (string, error) {
	ret := _m.Called(input, lang)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UserLogin, locales.Language) (string, error)); ok {
		return rf(input, lang)
	}
	if rf, ok := ret.Get(0).(func(dto.UserLogin, locales.Language) string); ok {
		r0 = rf(input, lang)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.UserLogin, locales.Language) error); ok {
		r1 = rf(input, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: input, lang
func (_m *UserService) Signup(input dto.UserSignup, lang locales.Language) (string, error) {
	ret := _m.Called(input, lang)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UserSignup, locales.Language) (string, error)); ok {
		return rf(input, lang)
	}
	if rf, ok := ret.Get(0).(func(dto.UserSignup, locales.Language) string); ok {
		r0 = rf(input, lang)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.UserSignup, locales.Language) error); ok {
		r1 = rf(input, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: id, input
func (_m *UserService) UpdateProfile(id uint, input interface{}) error {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, interface{}) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyCode provides a mock function with given fields: id, code, lang
func (_m *UserService) VerifyCode(id uint, code int, lang locales.Language) error {
	ret := _m.Called(id, code, lang)

	if len(ret) == 0 {
		panic("no return value specified for VerifyCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, int, locales.Language) error); ok {
		r0 = rf(id, code, lang)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
